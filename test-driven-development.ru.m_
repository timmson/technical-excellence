---
title: Разработка через тестирование
order: 30
---

## Что такое Разработка через тестирование?

Разработка через тестирование (test-driven development, TDD) это стиль разработки, в котором развитие системы определяется тестамии в коротких циклах:

1. Наисать один тест.
2. Написать только лишь необходимое количество кода, чтобы тест проходил.
3. Провести рефакторинг кода, сделать его "чистым".

<img src="/img/technical-excellence/tdd.png" width="30%">

В языках программирования, таких как Java, такие циклы занимают не более пяти минут. В старых яызках, с медленной компилцияй и меньшей поддержкой автоматизации рефакторинга, такой цикл занимает больше времени - около 20 минут.

Разработка через тестирование чем-то отличается для случаев крупномасштабной разработки? Нет. Это индивидуальный навык конкретного разработчика, поэтому их количество в продукте не имеет значение.
Объем унаследованного кода, старых технологий, встраиваемого ПО не оказывает влияения на возможность применения unit-тестирования и TDD. Следовательно, большинство экспериментов в это разделе относятся и к таким случаям.

### TDD-цикл должен быть ...

<dl>
<dt>Коротким</dt>
<dd>Время выполнение каждого теста мало. Цикл не должен занимать более 5 минут.</dd>

<dt>Ритмичным</dt>
<dd>Вы отчетливо почуствуете ритм - “красный, зеленй, рефакторинг... краный, зеленый, рефакторинг...” (red-green-refactor)</dd>

<dt>Инкрементальным</dt>
<dd>Вы знаете, что при написании и прохождении новых тестов, работающий функционал приращается инкрментно.</dd>

<dt>Сфокусированным на дизайне</dt>
<dd>Хорошо зная принципы дизайна ПО, вы откроете для себя, что TDD это не техника тестироавания, а метод проектирования ПО.</dd>

<dt>Дисциплинированным</dt>
<dd>TDD это другой подход к разработке ПО. Отказ от старой привычки "code and fix" и внедрение новой потребуют дисциплины и упорства.</dd>
</dl>

## Почему TDD?


## Тренировка TDD

### Воспользуйтесь помощью тренеров по TDD

When a client of ours reviewed a draft of the companion book, he mentioned that we ought to stress coaching more. “One of our mistakes is that we didn’t provide enough coaching,” he said. Though we agreed with him, we pointed out that since we are both consultants and provide such coaching, this advice would not be very credible. We might as well add an experiment “Try...Hire us.” Thus, we minimized the advice related to hiring coaches.

But related to test-driven development, we cannot stress strongly enough: Hire coaches! Adopting TDD means unlearning traditional programming and relearning how to design and code. We rarely meet people who were able to adopt this by self-education. Most developers need a coach to pair-program with them for days or weeks. The coach constantly reminds them to write the tests first and to really clean up the code—including the test code. He helps them apply TDD and refactoring to their real code.

Разработка через тестирование может быть самой сложной гибкой практикой для внедрения, но это также одна из самых больших возможностей для увеличения качества проектирования и кода. Наймите тренеров!

### Внутренние и внешние тренеры

Внешние тренеры необходимы для внедрения TDD, потому что данный навык еще не привит внутри компании. Но по прошествии времени, воспитание внутренних тренеров снижает зависимость от их внешних коллег и снижает стоимость обучения.

Мы наблюдали несколько попыток провала в развитии внутренних тренеров. Во некоторые их причины:

* Отсутствие структуры в точке принятия решений, когда и какими командами кто будет работаь.
* Отсутствие времения, выделенно на тренировки. Вместо этого тренеров просили заниматься обычно разработкой.
* Разработчиким менее охотно учились у внутренних тренеров... вы никогда не будете пророком на своей земле.
* Тренерские навыки не ценились и не поличали дальнейшее развитие. В результате опытные тренеры часто уходили, чтобы стать внешними консультантами.

Выбирайтие как внутреннее так и внешнее обучение. Если остается только одно из них, это становиться рискованным. Но их комбинация может привести к хорошим результатам.

## Разработка через тестирование для создания лучшей архитектуры

TDD может помочь улучшить архитектуру системы. Как?

Когда мы консультируем, частый запрос состоит в помощи при работе с "негибкой архитектурой" наших клиентов. Чаще всего это сводится к проблемам в сильной связанности компонентов - распространенная проблема в унаследованном коде, написанном без TDD, потому что разработчик-автор не пытался тестировать компонент изолированно.

С другой стороны, когда разработчики создают новый компонент (например, новый класс) по TDD, или производят рефакторинг унаследованного компонента для того, чтобы его можно быть протестировать, они должны нарушить зависимости между этим компонентом и всеми остальными, чтобы протестировать его в изоляции. Это требует проектирования (или рефаккторинга) для внедерения зависимостей и улучшает использование механизмов гибкости: интерфейсов, полиморфизма, шаблонов проектирования, фреймворков для внедрения зависимостей, функциональных указателй и прочих.

В таком случае, TDD поддерживает слабую связанность, простоту, гибкое конфигурирование - качества хорошей архитектуры.